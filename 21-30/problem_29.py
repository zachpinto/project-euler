# Problem 29

# Title: Distinct powers

# Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

# 2^2=4, 2^3=8, 2^4=16, 2^5=32
# 3^2=9, 3^3=27, 3^4=81, 3^5=243
# 4^2=16, 4^3=64, 4^4=256, 4^5=1024
# 5^2=25, 5^3=125, 5^4=625, 5^5=3125

# If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

# How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

def user_inputs_a():
  a_lower = int(input("Please choose a lower bound for a such that a^b: "))
  a_upper = int(input("Please choose an upper bound for a such that a^b: "))

  return a_lower, a_upper

def user_inputs_b():
  b_lower = int(input("Please choose a lower bound for b such that a^b: "))
  b_upper = int(input("Please choose an upper bound for b such that a^b: "))

  return b_lower, b_upper


def distinct_powers(a_lower, a_upper, b_lower, b_upper):
  seen = set()

  for a in range(a_lower, a_upper + 1):
    for b in range(b_lower, b_upper + 1):
      result = a ** b
      if result not in seen:
        seen.add(result)
      else:
        continue

  return len(seen)


def main():
  a_lower, a_upper = user_inputs_a()
  b_lower, b_upper = user_inputs_b()

  result = distinct_powers(a_lower, a_upper, b_lower, b_upper)

  return result


main()
