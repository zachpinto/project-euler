# Problem 27

# Quadratic primes

# Euler discovered the remarkable quadratic formula:

# n^2 + n + 41

# It turns out that the formula will produce 40 primes for the consecutive integer values 0 <= n <= 39. However, when n = 40, 40^2 + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41^2 + 41 + 41 is clearly divisible by 41.

# The incredible formula n^2 - 79n + 1601 was discovered, which produces 80 primes for the consecutive values 0 <= n <= 79. The product of the coefficients, -79 and 1601, is -126479.

# Considering quadratics of the form:

# n^2 + an + b, where |a| < 1000 and |b| <= 1000

# where |n| is the modulus/absolute value of n

# e.g. |11| = 11 and |-4| = 4

# Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.

# Solution:

# The quadratic formula is n^2 + an + b. We know that b must be prime because when n = 0, the formula must be prime. We also know that a must be odd because when n = 1, the formula must be prime. We can use the sieve of Eratosthenes to generate a list of prime numbers up to 1000. We can then iterate through all possible values of a and b and count the number of primes generated by the formula. We can then return the product of the coefficients that produce the maximum number of primes.

def sieve_of_eratosthenes(n):
    primes = [True] * (n + 1)
    primes[0] = primes[1] = False

    for i in range(2, int(n ** 0.5) + 1):
        if primes[i]:
            for j in range(i * i, n + 1, i):
                primes[j] = False

    return [i for i in range(len(primes)) if primes[i]]


def quadratic_primes():
    primes = sieve_of_eratosthenes(1000)
    max_primes = 0
    product = 0

    for b in primes:
        for a in range(-999, 1000, 2):
            n = 0

            while True:
                if (n ** 2 + a * n + b) not in primes:
                    break

                n += 1

            if n > max_primes:
                max_primes = n
                product = a * b

    return product


def main():
    print(quadratic_primes())


main()
