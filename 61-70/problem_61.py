"""
Problem 61

Cyclical figurate numbers

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and
are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n^2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including
    the last number with the first).

    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a
    different number in the set.

    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square,
pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

"""


def user_input():
    num_digits = int(input("Enter the number of digits: "))
    num_cycles = int(input("Enter the number of cycles: "))
    return num_digits, num_cycles


def polygonal_number(s, n):
    if s == 3:
        return n * (n + 1) // 2
    elif s == 4:
        return n * n
    elif s == 5:
        return n * (3 * n - 1) // 2
    elif s == 6:
        return n * (2 * n - 1)
    elif s == 7:
        return n * (5 * n - 3) // 2
    elif s == 8:
        return n * (3 * n - 2)


def generate_polygonal_numbers(num_digits):
    lower_bound = 10**(num_digits - 1)
    upper_bound = 10**num_digits

    polygonal_numbers = {s: [] for s in range(3, 9)}
    for s in range(3, 9):
        n = 1
        while True:
            p = polygonal_number(s, n)
            if lower_bound <= p < upper_bound:
                polygonal_numbers[s].append(p)
            elif p >= upper_bound:
                break
            n += 1
    return polygonal_numbers


def is_cyclic_pair(n1, n2, num_digits):
    return str(n1)[-num_digits // 2:] == str(n2)[:num_digits // 2]


def search(cyclic_set, remaining_types, polygonal_numbers, num_digits):
    if not remaining_types:
        return cyclic_set if is_cyclic_pair(cyclic_set[-1], cyclic_set[0], num_digits) else None
    last = cyclic_set[-1]
    next_type = remaining_types[0]
    for num in polygonal_numbers[next_type]:
        if is_cyclic_pair(last, num, num_digits):
            result = search(cyclic_set + [num], remaining_types[1:], polygonal_numbers, num_digits)
            if result:
                return result
    return None


def find_cyclic_set(polygonal_numbers, num_cycles, num_digits):
    from itertools import permutations

    for perm in permutations(range(3, 3 + num_cycles)):
        for num in polygonal_numbers[perm[0]]:
            result = search([num], perm[1:], polygonal_numbers, num_digits)
            if result:
                return result
    return None


def main():
    num_digits, num_cycles = user_input()
    polygonal_numbers = generate_polygonal_numbers(num_digits)
    cyclic_set = find_cyclic_set(polygonal_numbers, num_cycles, num_digits)
    if cyclic_set:
        print("Cyclic Set:", cyclic_set)
        print("Sum:", sum(cyclic_set))
    else:
        print("No cyclic set found.")


main()
